#!/bin/bash

CONFIG_FILE="$HOME/.nodocker"


verify_env() {
  if [ -z "$CONTAINER_NAME" ]; then
      echo "‚ùå Erro: NODE_ENV_DK n√£o est√° definido. Use '$0 set <container-name>' antes."
      exit 1
  fi
}

# Carrega as vari√°veis do arquivo ~/.nodocker
load_config() {
  if [ -f "$CONFIG_FILE" ]; then
    export NODE_ENV_DK=$(grep "^NODE_ENV_DK=" "$CONFIG_FILE" | cut -d '=' -f2-)
    export NODE_VERSION_DK=$(grep "^NODE_VERSION_DK=" "$CONFIG_FILE" | cut -d '=' -f2-)
  fi

  NODE_VERSION_DK="${NODE_VERSION_DK:-latest}"
}

# Atualiza ou adiciona uma vari√°vel no arquivo ~/.nodocker
set_config_value() {
  VAR_NAME="$1"
  VAR_VALUE="$2"

  # Remove linha antiga (se existir)
  sed -i "/^${VAR_NAME}=/d" "$CONFIG_FILE" 2>/dev/null

  # Adiciona nova linha
  echo "${VAR_NAME}=${VAR_VALUE}" >> "$CONFIG_FILE"
}

# Printa as Configura√ß√µes do nodocker config
print_config() {
  echo "üìÑ Configura√ß√£o atual do ~/.nodocker:"
  echo

  if [ ! -f "$CONFIG_FILE" ]; then
    echo "‚ö†Ô∏è  Arquivo de configura√ß√£o n√£o encontrado: $CONFIG_FILE"
    return
  fi

  grep -E "^NODE_ENV_DK=|^NODE_VERSION_DK=" "$CONFIG_FILE" | while IFS='=' read -r key value; do
    case "$key" in
      NODE_ENV_DK)
        echo "üîß NODE_ENV_DK       = $value"
        ;;
      NODE_VERSION_DK)
        echo "üß™ NODE_VERSION_DK   = $value"
        ;;
    esac
  done
  echo
}


# Remove uma vari√°vel do arquivo ~/.nodocker
unset_config_value() {
  VAR_NAME="$1"
  sed -i "/^${VAR_NAME}=/d" "$CONFIG_FILE" 2>/dev/null
}

# Carrega config
load_config

# Define o nome do container
CONTAINER_NAME="${NODE_ENV_DK:-}"

case "$1" in
  start)
    verify_env

    if docker ps -a --format '{{.Names}}' | grep -q "^${CONTAINER_NAME}$"; then
      echo "‚ö° O container '${CONTAINER_NAME}' j√° existe. Iniciando..."
      docker start "${CONTAINER_NAME}"
    else
      echo "üöÄ Criando e iniciando o container '${CONTAINER_NAME}' com Node.js vers√£o '${NODE_VERSION_DK}'..."
      docker run -dit --name "${CONTAINER_NAME}" -v "$PWD":/home/node/app -w /home/node/app -p 3000:3000 node:${NODE_VERSION_DK} bash
    fi
    ;;

  stop)
    verify_env

    echo "üõë Parando o container '${CONTAINER_NAME}'..."
    docker stop "${CONTAINER_NAME}"
    ;;

  remove)
    verify_env

    echo "üî• Removendo o container '${CONTAINER_NAME}'..."
    docker rm "${CONTAINER_NAME}"
    ;;

  status)
    verify_env

    docker ps -a --format "table {{.Names}}\t{{.Status}}" | grep "${CONTAINER_NAME}" || echo "‚ùå O container '${CONTAINER_NAME}' n√£o existe."
    ;;

  shell)
    verify_env

    echo "üîç Abrindo um shell dentro do container '${CONTAINER_NAME}'..."
    docker exec -it "${CONTAINER_NAME}" bash
    ;;

  set)
    if [ -z "$2" ]; then
      echo "‚ùå Erro: Voc√™ deve fornecer um nome para o container."
      echo "Uso: $0 set <container-name>"
      exit 1
    fi

    set_config_value "NODE_ENV_DK" "$2"
    echo "‚úÖ NODE_ENV_DK definido como '$2'"
    ;;

  set-node-version)
    if [ -z "$2" ]; then
      echo "‚ùå Erro: Voc√™ deve fornecer uma vers√£o do Node.js."
      echo "Uso: $0 set-node-version <vers√£o>"
      exit 1
    fi

    set_config_value "NODE_VERSION_DK" "$2"
    echo "‚úÖ Vers√£o do Node.js definida como '$2'"
    ;;
  
  config)
    print_config
    ;;


  unset)
    unset_config_value "NODE_ENV_DK"
    echo "üóëÔ∏è NODE_ENV_DK removido."

    unset_config_value "NODE_VERSION_DK"
    echo "üóëÔ∏è NODE_VERSION_DK removido."
    ;;

  *)
    echo "‚ùå Uso: $0 {start|stop|remove|status|shell|config|set <container-name>|set-node-version <vers√£o>|unset}"
    exit 1
    ;;
esac
